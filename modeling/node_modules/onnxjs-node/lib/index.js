"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var onnxjs = __importStar(require("onnxjs"));
var os = __importStar(require("os"));
// check if Node.js
if (typeof process !== 'undefined' && process && process.release && process.release.name === 'node') {
    // check if 64-bit platform
    if (os.arch() !== 'x64') {
        throw new Error("onnxruntime does not support architecture '" + os.arch() + "'");
    }
    // check if Linux or Windows
    if (['win32', 'linux', 'darwin'].indexOf(os.platform()) === -1) {
        throw new Error("onnxruntime does not support platform '" + os.platform() + "'");
    }
    // check endianness
    if (os.endianness() !== 'LE') {
        throw new Error("onnxruntime node binding does not support non little-endian platform");
    }
    // create a new onnx object and assign property 'InferenceSession'
    var onnx_1 = Object.create(onnxjs);
    Object.defineProperty(onnx_1, 'InferenceSession', {
        enumerable: true,
        get: function () {
            return require('./inference-session-override').OnnxRuntimeInferenceSession;
        }
    });
    global.onnx = onnx_1;
}
module.exports = onnx;
//# sourceMappingURL=index.js.map